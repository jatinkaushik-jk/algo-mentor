export const algorithms = [
  {
    algoID: "Algo001",
    title: "Bubble Sort",
    description: "Simple comparison-based sorting.",
    difficulty: "easy",
    label: "sorting",
    timeComplexity: "O(n^2)",
  },
  {
    algoID: "Algo002",
    title: "Merge Sort",
    description: "Efficient, divide-and-conquer sorting.",
    difficulty: "medium",
    label: "sorting",
    timeComplexity: "O(n log n)",
  },
  {
    algoID: "Algo003",
    title: "Quick Sort",
    description: "Fast, in-place partition sorting.",
    difficulty: "hard",
    label: "sorting",
    timeComplexity: "O(n log n)",
  },
  {
    algoID: "Algo004",
    title: "Selection Sort",
    description: "Finds minimum, swaps positions.",
    difficulty: "easy",
    label: "sorting",
    timeComplexity: "O(n^2)",
  },
  {
    algoID: "Algo005",
    title: "Heap Sort",
    description: "Uses heap to sort elements.",
    difficulty: "medium",
    label: "sorting",
    timeComplexity: "O(n log n)",
  },
  {
    algoID: "Algo006",
    title: "Insertion Sort",
    description: "Builds sorted array one element.",
    difficulty: "easy",
    label: "sorting",
    timeComplexity: "O(n^2)",
  },
  {
    algoID: "Algo007",
    title: "Radix Sort",
    description: "Non-comparative, digit-wise sorting.",
    difficulty: "medium",
    label: "sorting",
    timeComplexity: "O(nk)",
  },
  {
    algoID: "Algo008",
    title: "Shell Sort",
    description: "Improved version of insertion sort.",
    difficulty: "medium",
    label: "sorting",
    timeComplexity: "O(n log n)",
  },
  {
    algoID: "Algo009",
    title: "Counting Sort",
    description: "Counts elements, sorts non-comparatively.",
    difficulty: "easy",
    label: "sorting",
    timeComplexity: "O(n + k)",
  },
  {
    algoID: "Algo010",
    title: "Tim Sort",
    description: "Hybrid merge and insertion sort.",
    difficulty: "hard",
    label: "sorting",
    timeComplexity: "O(n log n)",
  },
  {
    algoID: "Algo011",
    title: "Linear Search",
    description: "Sequentially checks each element.",
    difficulty: "easy",
    label: "searching",
    timeComplexity: "O(n)",
  },
  {
    algoID: "Algo012",
    title: "Binary Search",
    description: "Efficient search for sorted arrays.",
    difficulty: "easy",
    label: "searching",
    timeComplexity: "O(log n)",
  },
  {
    algoID: "Algo013",
    title: "Depth-First Search (DFS)",
    description: "Traverses tree/graph depth-first.",
    difficulty: "medium",
    label: "searching",
    timeComplexity: "O(V + E)",
  },
  {
    algoID: "Algo014",
    title: "Breadth-First Search (BFS)",
    description: "Traverses tree/graph breadth-first.",
    difficulty: "medium",
    label: "searching",
    timeComplexity: "O(V + E)",
  },
  {
    algoID: "Algo015",
    title: "Jump Search",
    description: "Jump ahead and then perform linear search.",
    difficulty: "medium",
    label: "searching",
    timeComplexity: "O(âˆšn)",
  },
];
