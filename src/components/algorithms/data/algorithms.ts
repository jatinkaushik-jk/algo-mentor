// * Access Level Distribution:
//    FREE: 22 algorithms (fundamental concepts)
//    PRO: 25 algorithms (intermediate to advanced)
//    MASTER: 3 algorithms (expert level)

// * Difficulty Distribution:
//    Easy: 12 algorithms
//    Medium: 26 algorithms
//    Hard: 12 algorithms

export const algorithms = [
  // Sorting Algorithms (Algo001-Algo010)
  {
    algoID: "Algo001",
    title: "Bubble Sort",
    description: "Simple comparison-based sorting.",
    difficulty: "Easy",
    label: "Sorting",
    category: "sorting",
    timeComplexity: "O(n^2)",
    access: "FREE",
  },
  {
    algoID: "Algo002",
    title: "Merge Sort",
    description: "Efficient, divide-and-conquer sorting.",
    difficulty: "Medium",
    label: "Sorting",
    category: "sorting",
    timeComplexity: "O(n log n)",
    access: "FREE",
  },
  {
    algoID: "Algo003",
    title: "Quick Sort",
    description: "Fast, in-place partition sorting.",
    difficulty: "Hard",
    label: "Sorting",
    category: "sorting",
    timeComplexity: "O(n log n)",
    access: "PRO",
  },
  {
    algoID: "Algo004",
    title: "Selection Sort",
    description: "Finds minimum, swaps positions.",
    difficulty: "Easy",
    label: "Sorting",
    category: "sorting",
    timeComplexity: "O(n^2)",
    access: "FREE",
  },
  {
    algoID: "Algo005",
    title: "Heap Sort",
    description: "Uses heap to sort elements.",
    difficulty: "Medium",
    label: "Sorting",
    category: "sorting",
    timeComplexity: "O(n log n)",
    access: "FREE",
  },
  {
    algoID: "Algo006",
    title: "Insertion Sort",
    description: "Builds sorted array one element.",
    difficulty: "Easy",
    label: "Sorting",
    category: "sorting",
    timeComplexity: "O(n^2)",
    access: "FREE",
  },
  {
    algoID: "Algo007",
    title: "Radix Sort",
    description: "Non-comparative, digit-wise sorting.",
    difficulty: "Medium",
    label: "Sorting",
    category: "sorting",
    timeComplexity: "O(nk)",
    access: "PRO",
  },
  {
    algoID: "Algo008",
    title: "Shell Sort",
    description: "Improved version of insertion sort.",
    difficulty: "Medium",
    label: "Sorting",
    category: "sorting",
    timeComplexity: "O(n log n)",
    access: "PRO",
  },
  {
    algoID: "Algo009",
    title: "Counting Sort",
    description: "Counts elements, sorts non-comparatively.",
    difficulty: "Easy",
    label: "Sorting",
    category: "sorting",
    timeComplexity: "O(n + k)",
    access: "FREE",
  },
  {
    algoID: "Algo010",
    title: "Tim Sort",
    description: "Hybrid merge and insertion sort.",
    difficulty: "Hard",
    label: "Sorting",
    category: "sorting",
    timeComplexity: "O(n log n)",
    access: "PRO",
  },

  // Searching Algorithms (Algo011-Algo015)
  {
    algoID: "Algo011",
    title: "Linear Search",
    description: "Sequentially checks each element.",
    difficulty: "Easy",
    label: "Searching",
    category: "searching",
    timeComplexity: "O(n)",
    access: "FREE",
  },
  {
    algoID: "Algo012",
    title: "Binary Search",
    description: "Efficient search for sorted arrays.",
    difficulty: "Easy",
    label: "Searching",
    category: "searching",
    timeComplexity: "O(log n)",
    access: "FREE",
  },
  {
    algoID: "Algo013",
    title: "Depth-First Search (DFS)",
    description: "Traverses tree/graph depth-first.",
    difficulty: "Medium",
    label: "Searching",
    category: "searching",
    timeComplexity: "O(V + E)",
    access: "PRO",
  },
  {
    algoID: "Algo014",
    title: "Breadth-First Search (BFS)",
    description: "Traverses tree/graph breadth-first.",
    difficulty: "Medium",
    label: "Searching",
    category: "searching",
    timeComplexity: "O(V + E)",
    access: "PRO",
  },
  {
    algoID: "Algo015",
    title: "Jump Search",
    description: "Jump ahead and then perform linear search.",
    difficulty: "Medium",
    label: "Searching",
    category: "searching",
    timeComplexity: "O(âˆšn)",
    access: "MASTER",
  },

  // Dynamic Programming Algorithms (Algo016-Algo020)
  {
    algoID: "Algo016",
    title: "Longest Common Subsequence (LCS)",
    description: "Finds longest subsequence common to sequences.",
    difficulty: "Medium",
    label: "Dynamic Programming",
    category: "dynamic programming",
    timeComplexity: "O(m * n)",
    access: "FREE",
  },
  {
    algoID: "Algo017",
    title: "0/1 Knapsack Problem",
    description: "Optimizes value within weight constraint.",
    difficulty: "Medium",
    label: "Dynamic Programming",
    category: "dynamic programming",
    timeComplexity: "O(n * W)",
    access: "PRO",
  },
  {
    algoID: "Algo018",
    title: "Edit Distance (Levenshtein)",
    description: "Minimum operations to transform strings.",
    difficulty: "Hard",
    label: "Dynamic Programming",
    category: "dynamic programming",
    timeComplexity: "O(m * n)",
    access: "PRO",
  },
  {
    algoID: "Algo019",
    title: "Coin Change Problem",
    description: "Minimum coins needed for target amount.",
    difficulty: "Medium",
    label: "Dynamic Programming",
    category: "dynamic programming",
    timeComplexity: "O(n * amount)",
    access: "FREE",
  },
  {
    algoID: "Algo020",
    title: "Longest Increasing Subsequence",
    description: "Finds longest strictly increasing subsequence.",
    difficulty: "Medium",
    label: "Dynamic Programming",
    category: "dynamic programming",
    timeComplexity: "O(n log n)",
    access: "PRO",
  },

  // Greedy Algorithms (Algo021-Algo024)
  {
    algoID: "Algo021",
    title: "Dijkstra's Shortest Path",
    description: "Finds shortest path in weighted graph.",
    difficulty: "Hard",
    label: "Greedy",
    category: "greedy",
    timeComplexity: "O(V log V + E)",
    access: "PRO",
  },
  {
    algoID: "Algo022",
    title: "Fractional Knapsack",
    description: "Maximizes value with fractional items.",
    difficulty: "Easy",
    label: "Greedy",
    category: "greedy",
    timeComplexity: "O(n log n)",
    access: "FREE",
  },
  {
    algoID: "Algo023",
    title: "Activity Selection Problem",
    description: "Selects maximum non-overlapping activities.",
    difficulty: "Easy",
    label: "Greedy",
    category: "greedy",
    timeComplexity: "O(n log n)",
    access: "FREE",
  },
  {
    algoID: "Algo024",
    title: "Huffman Coding",
    description: "Optimal prefix-free encoding algorithm.",
    difficulty: "Medium",
    label: "Greedy",
    category: "greedy",
    timeComplexity: "O(n log n)",
    access: "MASTER",
  },

  // Divide and Conquer (Algo025-Algo027)
  {
    algoID: "Algo025",
    title: "Strassen's Matrix Multiplication",
    description: "Efficient matrix multiplication algorithm.",
    difficulty: "Hard",
    label: "Divide And Conquer",
    category: "divide and conquer",
    timeComplexity: "O(n^2.807)",
    access: "MASTER",
  },
  {
    algoID: "Algo026",
    title: "Closest Pair of Points",
    description: "Finds closest pair in 2D plane.",
    difficulty: "Hard",
    label: "Divide And Conquer",
    category: "divide and conquer",
    timeComplexity: "O(n log n)",
    access: "PRO",
  },
  {
    algoID: "Algo027",
    title: "Maximum Subarray (Kadane's)",
    description: "Finds contiguous subarray with maximum sum.",
    difficulty: "Medium",
    label: "Divide And Conquer",
    category: "divide and conquer",
    timeComplexity: "O(n)",
    access: "FREE",
  },

  // Hashing Algorithms (Algo028-Algo029)
  {
    algoID: "Algo028",
    title: "Hash Table Implementation",
    description: "Key-value storage with constant access.",
    difficulty: "Medium",
    label: "Hashing",
    category: "hashing",
    timeComplexity: "O(1) avg",
    access: "FREE",
  },
  {
    algoID: "Algo029",
    title: "Consistent Hashing",
    description: "Distributes keys across dynamic nodes.",
    difficulty: "Hard",
    label: "Hashing",
    category: "hashing",
    timeComplexity: "O(log n)",
    access: "MASTER",
  },

  // Backtracking Algorithms (Algo030-Algo032)
  {
    algoID: "Algo030",
    title: "N-Queens Problem",
    description: "Places N queens on chessboard safely.",
    difficulty: "Hard",
    label: "Backtracking",
    category: "backtracking",
    timeComplexity: "O(n!)",
    access: "PRO",
  },
  {
    algoID: "Algo031",
    title: "Sudoku Solver",
    description: "Solves 9x9 Sudoku puzzle completely.",
    difficulty: "Hard",
    label: "Backtracking",
    category: "backtracking",
    timeComplexity: "O(9^(n*n))",
    access: "PRO",
  },
  {
    algoID: "Algo032",
    title: "Permutations Generation",
    description: "Generates all possible permutations.",
    difficulty: "Medium",
    label: "Backtracking",
    category: "backtracking",
    timeComplexity: "O(n!)",
    access: "FREE",
  },

  // Graph Algorithms (Algo033-Algo034)
  {
    algoID: "Algo033",
    title: "Kruskal's MST Algorithm",
    description: "Finds minimum spanning tree efficiently.",
    difficulty: "Medium",
    label: "Graph",
    category: "graph",
    timeComplexity: "O(E log E)",
    access: "PRO",
  },
  {
    algoID: "Algo034",
    title: "Topological Sort",
    description: "Linear ordering of directed acyclic graph.",
    difficulty: "Medium",
    label: "Graph",
    category: "graph",
    timeComplexity: "O(V + E)",
    access: "FREE",
  },

  // Tree Algorithm (Algo035)
  {
    algoID: "Algo035",
    title: "Lowest Common Ancestor (LCA)",
    description: "Finds deepest common ancestor in tree.",
    difficulty: "Medium",
    label: "Tree",
    category: "tree",
    timeComplexity: "O(log n)",
    access: "PRO",
  },

  // Additional High-Frequency Algorithms (Algo036-Algo050)
  // String Algorithms
  {
    algoID: "Algo036",
    title: "KMP String Matching",
    description: "Efficient pattern matching with failure function.",
    difficulty: "Hard",
    label: "String",
    category: "string",
    timeComplexity: "O(n + m)",
    access: "PRO",
  },
  {
    algoID: "Algo037",
    title: "Rabin-Karp Algorithm",
    description: "Rolling hash pattern matching.",
    difficulty: "Medium",
    label: "String",
    category: "string",
    timeComplexity: "O(n + m)",
    access: "PRO",
  },
  {
    algoID: "Algo038",
    title: "Longest Palindromic Substring",
    description: "Finds longest palindrome in string.",
    difficulty: "Medium",
    label: "String",
    category: "string",
    timeComplexity: "O(n^2)",
    access: "FREE",
  },

  // More Dynamic Programming
  {
    algoID: "Algo039",
    title: "House Robber Problem",
    description: "Maximum money without adjacent houses.",
    difficulty: "Easy",
    label: "Dynamic Programming",
    category: "dynamic programming",
    timeComplexity: "O(n)",
    access: "FREE",
  },
  {
    algoID: "Algo040",
    title: "Palindrome Partitioning",
    description: "Minimum cuts for palindromic partition.",
    difficulty: "Hard",
    label: "Dynamic Programming",
    category: "dynamic programming",
    timeComplexity: "O(n^2)",
    access: "PRO",
  },
  {
    algoID: "Algo041",
    title: "Maximum Product Subarray",
    description: "Finds subarray with maximum product.",
    difficulty: "Medium",
    label: "Dynamic Programming",
    category: "dynamic programming",
    timeComplexity: "O(n)",
    access: "FREE",
  },

  // More Graph Algorithms
  {
    algoID: "Algo042",
    title: "Floyd-Warshall Algorithm",
    description: "All-pairs shortest path algorithm.",
    difficulty: "Hard",
    label: "Graph",
    category: "graph",
    timeComplexity: "O(V^3)",
    access: "PRO",
  },
  {
    algoID: "Algo043",
    title: "Bellman-Ford Algorithm",
    description: "Single-source shortest path with negative edges.",
    difficulty: "Medium",
    label: "Graph",
    category: "graph",
    timeComplexity: "O(VE)",
    access: "PRO",
  },
  {
    algoID: "Algo044",
    title: "Union Find (Disjoint Set)",
    description: "Efficiently tracks set partitions.",
    difficulty: "Medium",
    label: "Graph",
    category: "graph",
    timeComplexity: "O(Î±(n))",
    access: "FREE",
  },

  // Advanced Data Structures
  {
    algoID: "Algo045",
    title: "Trie (Prefix Tree)",
    description: "Tree for storing strings efficiently.",
    difficulty: "Medium",
    label: "Tree",
    category: "tree",
    timeComplexity: "O(m)",
    access: "FREE",
  },
  {
    algoID: "Algo046",
    title: "Segment Tree",
    description: "Range query and update operations.",
    difficulty: "Hard",
    label: "Tree",
    category: "tree",
    timeComplexity: "O(log n)",
    access: "MASTER",
  },

  // Two Pointers Technique
  {
    algoID: "Algo047",
    title: "Container With Most Water",
    description: "Two pointers to find maximum area.",
    difficulty: "Medium",
    label: "Two Pointers",
    category: "two pointers",
    timeComplexity: "O(n)",
    access: "FREE",
  },
  {
    algoID: "Algo048",
    title: "Remove Duplicates from Sorted Array",
    description: "In-place duplicate removal technique.",
    difficulty: "Easy",
    label: "Two Pointers",
    category: "two pointers",
    timeComplexity: "O(n)",
    access: "FREE",
  },

  // Sliding Window
  {
    algoID: "Algo049",
    title: "Longest Substring Without Repeating",
    description: "Sliding window for unique character substring.",
    difficulty: "Medium",
    label: "Sliding Window",
    category: "sliding window",
    timeComplexity: "O(n)",
    access: "FREE",
  },

  // Advanced Algorithms
  {
    algoID: "Algo050",
    title: "Boyer-Moore Majority Vote",
    description: "Finds majority element efficiently.",
    difficulty: "Easy",
    label: "Array",
    category: "array",
    timeComplexity: "O(n)",
    access: "FREE",
  },
];